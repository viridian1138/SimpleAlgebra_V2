

//$$strtCprt
//
// Simple Algebra 
// 
// Copyright (C) 2014 Thornton Green
// 
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, 
// see <http://www.gnu.org/licenses>.
// Additional permission under GNU GPL version 3 section 7
//
//
//$$endCprt

package simplealgebra.symbolic




import simplealgebra.SymbolicConjugateLeft;
import simplealgebra.SymbolicConjugateRight;
import simplealgebra.SymbolicInvertLeftRevCoeff;
import simplealgebra.SymbolicInvertRightRevCoeff;
import simplealgebra.SymbolicMultRevCoeff;
import simplealgebra.SymbolicTranspose;
import simplealgebra.ComplexElemFactory;
import simplealgebra.SquareMatrixElemFactory;
import simplealgebra.ddx.PartialDerivativeOp;
import simplealgebra.ddx.FlowVectorTensor;
import simplealgebra.ddx.MaterialDerivativeFactory;
import simplealgebra.ddx.DirectionalDerivative;
import simplealgebra.ddx.CovariantDerivative;
import simplealgebra.ddx.CovariantDerivativeFactory;
import simplealgebra.et.SymbolicIndexReduction;
import simplealgebra.et.SymbolicRankTwoTrace;
import simplealgebra.et.SymbolicRegenContravar;
import simplealgebra.et.SymbolicRegenCovar;
import simplealgebra.et.SymbolicTensorResym;
import simplealgebra.et.OrdinaryDerivative;
import simplealgebra.et.EinsteinTensorElemFactory;
import simplealgebra.ga.SymbolicReverseLeft;
import simplealgebra.ga.SymbolicReverseRight;
import simplealgebra.ga.SymbolicDot;
import simplealgebra.ga.SymbolicDotHestenes;
import simplealgebra.ga.SymbolicLeftContraction;
import simplealgebra.ga.SymbolicRightContraction;
import simplealgebra.ga.SymbolicWedge;
import simplealgebra.ga.SymbolicCross;
import simplealgebra.ga.SymbolicScalar;
import simplealgebra.ga.GeometricAlgebraMultivectorElemFactory;






rule "Apply Placeholder"
     when
          r0 : Reng( )
          p : SymbolicPlaceholder( elem == r0.getStrt() )
     then
          // System.out.println( "Apply Placeholder" );
          modify( p ){ setElem( r0.getEnd() ) };
end






rule "Apply Negate"
     when
          r0 : Reng( )
          p : SymbolicNegate( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Negate" );
          insert( new Reng( p , r0.getEnd().negate().insSym( ds ) ) );
end






rule "Apply Absolute Value"
     when
          r0 : Reng( )
          p : SymbolicAbsoluteValue( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Absolute Value" );
          insert( new Reng( p , new SymbolicAbsoluteValue( r0.getEnd() , p.getFac().getFac() , ds ) ) );
end







rule "Apply Invert Left"
     when
          r0 : Reng( )
          p : SymbolicInvertLeft( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Invert Left" );
          insert( new Reng( p , new SymbolicInvertLeft( r0.getEnd() , p.getFac().getFac() , ds ) ) );
end







rule "Apply Invert Right"
     when
          r0 : Reng( )
          p : SymbolicInvertRight( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Invert Right" );
          insert( new Reng( p , new SymbolicInvertRight( r0.getEnd() , p.getFac().getFac() , ds ) ) );
end








rule "Apply Reverse Left"
     when
          r0 : Reng( )
          p : SymbolicReverseLeft( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Reverse Left" );
          insert( new Reng( p , new SymbolicReverseLeft( r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end







rule "Apply Reverse Right"
     when
          r0 : Reng( )
          p : SymbolicReverseRight( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Reverse Right" );
          insert( new Reng( p , new SymbolicReverseRight( r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end








rule "Apply Divide By"
     when
          r0 : Reng( )
          p : SymbolicDivideBy( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Divide By" );
          insert( new Reng( p , new SymbolicDivideBy( r0.getEnd() , p.getFac().getFac() , p.getIval() , ds ) ) );
end








rule "Apply Mutable"
     when
          r0 : Reng( )
          p : SymbolicMutable( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Mutable" );
          insert( new Reng( p , new SymbolicMutable( r0.getEnd() , p.getElemB() , p.getFac().getFac() , ds ) ) );
end








rule "Apply AddA"
     when
          r0 : Reng( )
          p : SymbolicAdd( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply AddA" );
          insert( new Reng( p , r0.getEnd().add( p.getElemB() ).insSym( ds ) ) );
end





rule "Apply AddB"
     when
          r0 : Reng( )
          p : SymbolicAdd( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply AddB" );
          insert( new Reng( p , p.getElemA().add( r0.getEnd() ).insSym( ds ) ) );
end





rule "Apply MultA"
     when
          r0 : Reng( )
          p : SymbolicMult( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply MultA" );
          insert( new Reng( p , r0.getEnd().mult( p.getElemB() ).insSym( ds ) ) );
end





rule "Apply MultB"
     when
          r0 : Reng( )
          p : SymbolicMult( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply MultB" );
          insert( new Reng( p , p.getElemA().mult( r0.getEnd() ).insSym( ds ) ) );
end





rule "Apply SymbolicReduction"
     when
          r0 : Reng( )
          p : SymbolicReduction( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply SymbolicReduction" );
          insert( new Reng( p , new SymbolicReduction( r0.getEnd() , p.getFac().getFac() , ds ) ) );
end





rule "Apply SymbolicSqrt"
     when
          r0 : Reng( )
          p : SymbolicSqrt( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply SymbolicSqrt" );
          insert( new Reng( p , new SymbolicSqrt( r0.getEnd() , p.getFac().getFac() , ds ) ) );
end





rule "Apply SymbolicExponential"
     when
          r0 : Reng( )
          p : SymbolicExponential( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply SymbolicExponential" );
          insert( new Reng( p , new SymbolicExponential( r0.getEnd() , p.getFac().getFac() , p.getIval() , ds ) ) );
end





rule "Apply SymbolicSine"
     when
          r0 : Reng( )
          p : SymbolicSine( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply SymbolicSine" );
          insert( new Reng( p , new SymbolicSine( r0.getEnd() , p.getFac().getFac() , p.getIval() , ds ) ) );
end





rule "Apply SymbolicCosine"
     when
          r0 : Reng( )
          p : SymbolicCosine( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply SymbolicCosine" );
          insert( new Reng( p , new SymbolicCosine( r0.getEnd() , p.getFac().getFac() , p.getIval() , ds ) ) );
end








rule "Apply DotA"
     when
          r0 : Reng( )
          p : SymbolicDot( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply DotA" );
          insert( new Reng( p , new SymbolicDot( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply DotB"
     when
          r0 : Reng( )
          p : SymbolicDot( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply DotB" );
          insert( new Reng( p , new SymbolicDot( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end






rule "Apply DotHestenesA"
     when
          r0 : Reng( )
          p : SymbolicDotHestenes( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply DotHestenesA" );
          insert( new Reng( p , new SymbolicDotHestenes( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply DotHestenesB"
     when
          r0 : Reng( )
          p : SymbolicDotHestenes( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply DotHestenesB" );
          insert( new Reng( p , new SymbolicDotHestenes( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply LeftContractionA"
     when
          r0 : Reng( )
          p : SymbolicLeftContraction( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply LeftContractionA" );
          insert( new Reng( p , new SymbolicLeftContraction( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply LeftContractionB"
     when
          r0 : Reng( )
          p : SymbolicLeftContraction( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply LeftContractionB" );
          insert( new Reng( p , new SymbolicLeftContraction( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply RightContractionA"
     when
          r0 : Reng( )
          p : SymbolicRightContraction( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply RightContractionA" );
          insert( new Reng( p , new SymbolicRightContraction( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply RightContractionB"
     when
          r0 : Reng( )
          p : SymbolicRightContraction( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply RightContractionB" );
          insert( new Reng( p , new SymbolicRightContraction( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Transpose"
     when
          r0 : Reng( )
          p : SymbolicTranspose( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Transpose" );
          insert( new Reng( p , new SymbolicTranspose( r0.getEnd() , (SquareMatrixElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Invert Left Rev Coeff"
     when
          r0 : Reng( )
          p : SymbolicInvertLeftRevCoeff( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Invert Left Rev Coeff" );
          insert( new Reng( p , new SymbolicInvertLeftRevCoeff( r0.getEnd() , (SquareMatrixElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Invert Right Rev Coeff"
     when
          r0 : Reng( )
          p : SymbolicInvertRightRevCoeff( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Invert Right Rev Coeff" );
          insert( new Reng( p , new SymbolicInvertRightRevCoeff( r0.getEnd() , (SquareMatrixElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply MultRevCoeffA"
     when
          r0 : Reng( )
          p : SymbolicMultRevCoeff( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply MultRevCoeffA" );
          insert( new Reng( p , new SymbolicMultRevCoeff( r0.getEnd() , p.getElemB() , (SquareMatrixElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply MultRevCoeffB"
     when
          r0 : Reng( )
          p : SymbolicMultRevCoeff( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply MultRevCoeffB" );
          insert( new Reng( p , new SymbolicMultRevCoeff( p.getElemA() , r0.getEnd() , (SquareMatrixElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Conjugate Left"
     when
          r0 : Reng( )
          p : SymbolicConjugateLeft( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Conjugate Left" );
          insert( new Reng( p , new SymbolicConjugateLeft( r0.getEnd() , (ComplexElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Conjugate Right"
     when
          r0 : Reng( )
          p : SymbolicConjugateRight( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Conjugate Right" );
          insert( new Reng( p , new SymbolicConjugateRight( r0.getEnd() , (ComplexElemFactory)( p.getFac().getFac() ) , ds ) ) );
end






rule "Apply WedgeA"
     when
          r0 : Reng( )
          p : SymbolicWedge( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply WedgeA" );
          insert( new Reng( p , new SymbolicWedge( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply WedgeB"
     when
          r0 : Reng( )
          p : SymbolicWedge( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply WedgeB" );
          insert( new Reng( p , new SymbolicWedge( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end






rule "Apply ScalarA"
     when
          r0 : Reng( )
          p : SymbolicScalar( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply ScalarA" );
          insert( new Reng( p , new SymbolicScalar( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply ScalarB"
     when
          r0 : Reng( )
          p : SymbolicScalar( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply ScalarB" );
          insert( new Reng( p , new SymbolicScalar( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end






rule "Apply CrossA"
     when
          r0 : Reng( )
          p : SymbolicCross( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply CrossA" );
          insert( new Reng( p , new SymbolicCross( r0.getEnd() , p.getElemB() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply CrossB"
     when
          r0 : Reng( )
          p : SymbolicCross( elemB == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply CrossB" );
          insert( new Reng( p , new SymbolicCross( p.getElemA() , r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply ReverseLeft"
     when
          r0 : Reng( )
          p : SymbolicReverseLeft( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply ReverseLeft" );
          insert( new Reng( p , new SymbolicReverseLeft( r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply ReverseRight"
     when
          r0 : Reng( )
          p : SymbolicReverseRight( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply ReverseRight" );
          insert( new Reng( p , new SymbolicReverseRight( r0.getEnd() , (GeometricAlgebraMultivectorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Symbolic Index Reduction"
     when
          r0 : Reng( )
          p : SymbolicIndexReduction( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Symbolic Index Reduction" );
          insert( new Reng( p , new SymbolicIndexReduction( r0.getEnd() , (EinsteinTensorElemFactory)( p.getFac().getFac() ) ,  p.getContravariantReduce() , p.getCovariantReduce() , ds ) ) );
end





rule "Apply Symbolic Rank Two Trace"
     when
          r0 : Reng( )
          p : SymbolicRankTwoTrace( elemA == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Symbolic Rank Two Trace" );
          insert( new Reng( p , new SymbolicRankTwoTrace( r0.getEnd() , (EinsteinTensorElemFactory)( p.getFac().getFac() ) , ds ) ) );
end





rule "Apply Symbolic Regen Contravar"
     when
          r0 : Reng( )
          p : SymbolicRegenContravar( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Symbolic Regen Contravar" );
          insert( new Reng( p , new SymbolicRegenContravar( r0.getEnd() , (EinsteinTensorElemFactory)( p.getFac().getFac() ) , p.getNewContravar() , ds ) ) );
end





rule "Apply Symbolic Regen Covar"
     when
          r0 : Reng( )
          p : SymbolicRegenCovar( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Symbolic Regen Covar" );
          insert( new Reng( p , new SymbolicRegenCovar( r0.getEnd() , (EinsteinTensorElemFactory)( p.getFac().getFac() ) , p.getNewCovar() , ds ) ) );
end





rule "Apply Symbolic Tensor Resym"
     when
          r0 : Reng( )
          p : SymbolicTensorResym( elem == r0.getStrt() )
          not( Reng( strt == p ) )
          ds : DroolsSession()
     then
          // System.out.println( "Apply Symbolic Tensor Resym" );
          insert( new Reng( p , new SymbolicTensorResym( r0.getEnd() , (EinsteinTensorElemFactory)( p.getFac().getFac() ) , p.getReSym() , p.getDim() , ds ) ) );
end







