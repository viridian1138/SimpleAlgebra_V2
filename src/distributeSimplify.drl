

//$$strtCprt
//
// Simple Algebra 
// 
// Copyright (C) 2014 Thornton Green
// 
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, 
// see <http://www.gnu.org/licenses>.
// Additional permission under GNU GPL version 3 section 7
//
//
//$$endCprt

package simplealgebra.symbolic

rule "Double Negate"
     when
          e0 : SymbolicElem( )
          n0 : SymbolicNegate( elem == e0 )
          n1 : SymbolicNegate( elem == n0 )
          p : SymbolicPlaceholder( elem == n1 )
     then
          modify( p ){ setElem( e0 ) };
end



rule "Negate Zero"
      when
          ez : SymbolicZero( )
          n1 : SymbolicNegate( elem == ez )
          p : SymbolicPlaceholder( elem == n1 )
      then
          modify( p ){ setElem( ez ) };
end



rule "Add Zero A"
      when
          ez : SymbolicZero( )
          nez : SymbolicElem( )
          add1 : SymbolicAdd( elemA == ez , elemB == nez )
          p : SymbolicPlaceholder( elem == add1 )
      then
          modify( p ){ setElem( nez ) };
end




rule "Add Zero B"
      when
          ez : SymbolicZero( )
          nez : SymbolicElem( )
          add1 : SymbolicAdd( elemA == nez , elemB == ez )
          p : SymbolicPlaceholder( elem == add1 )
      then
          modify( p ){ setElem( nez ) };
end




rule "El Plus Negative El"
      when
          elA : SymbolicElem( )
          elB : SymbolicElem( )
          add1 : SymbolicAdd( elemA == elA , elemB == elB )
          p : SymbolicPlaceholder( elem == add1 )
          eval( elA.symbolicEquals( new SymbolicNegate( elB , elB.getFac() ) ) )
      then
          modify( p ){ setElem( new SymbolicZero( elA.getFac() ) ) };
          insert( p.getElem() );
end





