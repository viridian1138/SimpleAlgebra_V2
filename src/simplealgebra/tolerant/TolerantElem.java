


//$$strtCprt
/**
* Simple Algebra 
* 
* Copyright (C) 2014 Thornton Green
* 
* This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with this program; if not, 
* see <http://www.gnu.org/licenses>.
* Additional permission under GNU GPL version 3 section 7
*
*/
//$$endCprt



package simplealgebra.tolerant;

import java.io.PrintStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import org.kie.internal.runtime.StatefulKnowledgeSession;

import simplealgebra.*;
import simplealgebra.ga.GeometricAlgebraMultivectorElem;
import simplealgebra.ga.GeometricAlgebraMultivectorElemFactory;
import simplealgebra.ga.GeometricAlgebraOrd;
import simplealgebra.symbolic.MultiplicativeDistributionRequiredException;
import simplealgebra.symbolic.PrecedenceComparator;
import simplealgebra.symbolic.SymbolicElem.EVAL_MODE;

/**
 * An elem that is tolerant of exceptional outcomes generated by an enclosed elem.
 * 
 * This documentation should be viewed using Firefox version 33.1.1 or above.
 * 
 * @author thorngreen
 *
 * @param <R> The enclosed elem type.
 * @param <S> The factory for the enclosed elem type.
 * @param <T> The factory for tolerant results.
 */
public class TolerantElem<R extends Elem<R,?>, S extends ElemFactory<R,S>,T extends TolerantResultFactory<R,S,T>> 
	extends MutableElem<R,TolerantElem<R,S,T>,TolerantElemFactory<R,S,T>>
	{

	@Override
	public TolerantElem<R, S, T> add(TolerantElem<R, S, T> b) {
		try
		{
			return( new TolerantElem<R,S,T>( value.add( b.value ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantAdd( value , b.value , ex ) , trf ) );
		}
	}

	@Override
	public TolerantElem<R, S, T> mult(TolerantElem<R, S, T> b) {
		try
		{
			return( new TolerantElem<R,S,T>( value.mult( b.value ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantMult( value , b.value , ex ) , trf ) );
		}
	}

	@Override
	public TolerantElem<R, S, T> negate() {
		try
		{
			return( new TolerantElem<R,S,T>( value.negate() , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantNegate( value , ex ) , trf ) );
		}
	}
	
	@Override
	public TolerantElem<R, S, T> mutate( Mutator<R> mutr ) throws NotInvertibleException {
		try 
		{
			return( new TolerantElem<R,S,T>( mutr.mutate( value ) , trf ) );
		}
		catch( NotInvertibleException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantMutate( value , mutr , ex ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantMutate( value , mutr , ex ) , trf ) );
		}
	}

	@Override
	public TolerantElem<R, S, T> invertLeft() throws NotInvertibleException {
		try
		{
			return( new TolerantElem<R,S,T>( value.invertLeft() , trf ) );
		}
		catch( NotInvertibleException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantInvertLeft( value , ex ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantInvertLeft( value , ex ) , trf ) );
		}
	}
	
	@Override
	public TolerantElem<R, S, T> invertRight() throws NotInvertibleException {
		try
		{
			return( new TolerantElem<R,S,T>( value.invertRight() , trf ) );
		}
		catch( NotInvertibleException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantInvertRight( value , ex ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantInvertRight( value , ex ) , trf ) );
		}
	}
	

	@Override
	public TolerantElem<R, S, T> divideBy(BigInteger val) {
		try
		{
			return( new TolerantElem<R,S,T>( value.divideBy(val) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantDivideBy( value , val , ex ) , trf ) );
		}
		
	}
	
	@Override
	public TolerantElem<R, S, T> random( PrimitiveRandom in ) {
		try
		{
			return( new TolerantElem<R,S,T>( value.random(in) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantRandom( value , in , ex ) , trf ) );
		}
	}
	
	
	@Override
	public TolerantElem<R, S, T> handleOptionalOp( Object id , ArrayList<TolerantElem<R, S, T>> args ) throws NotInvertibleException
	{
		final ArrayList<R> args2 = new ArrayList<R>();
		for( final TolerantElem<R,S,T> t : args )
		{
			args2.add( t.getValue() );
		}
		try
		{
			return( new TolerantElem<R,S,T>( value.handleOptionalOp(id, args2) , trf ) );
		}

		catch( NotInvertibleException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantOptionalOp( value , id , args2 , ex ) , trf ) );
		}
		catch( BadCreationException ex )
		{
			return( new TolerantElem<R,S,T>( trf.getTolerantOptionalOp( value , id , args2 , ex ) , trf ) );
		}
	}

	
	@Override
	public TolerantElemFactory<R, S, T> getFac() {
		return( new TolerantElemFactory<R,S,T>( (S)( value.getFac() ) , trf ) );
	}
	
	
	
	
	
	@Override 
	public Elem<?,?> totalMagnitude()
	{
		try
		{
			return( value.totalMagnitude() );
		}
		catch( BadCreationException ex )
		{
			return( trf.getTolerantTotalMagnitude( value , ex ) );
		}
	}
	
	
	@Override
	public TolerantElem<R,S,T> cloneThread( final BigInteger threadIndex )
	{
		final R val2 = value.cloneThread(threadIndex);
		final T trf2 = trf.cloneThread(threadIndex);
		if( ( val2 != value ) || ( trf2 != trf ) )
		{
			return( new TolerantElem<R,S,T>( val2 , trf2 ) );
		}
		return( this );
	}
	
	
	@Override
	public TolerantElem<R,S,T> cloneThreadCached( final BigInteger threadIndex , final CloneThreadCache<TolerantElem<R,S,T>,TolerantElemFactory<R,S,T>> cache )
	{
		final TolerantElem<R,S,T> ctmp = cache.get( this );
		if( ctmp != null )
		{
			return( ctmp );
		}
		final R val2 = value.cloneThreadCached(threadIndex, (CloneThreadCache)( cache.getInnerCache() ) );
		final T trf2 = trf.cloneThread(threadIndex );
		if( ( val2 != value ) || ( trf2 != trf ) )
		{
			final TolerantElem<R,S,T> rtmp = new TolerantElem<R,S,T>( val2 , trf2 );
			cache.put(this, rtmp);
			return( rtmp );
		}
		cache.put(this, this);
		return( this );
	}
	
	
	@Override
	public void performInserts( StatefulKnowledgeSession session )
	{
		value.performInserts( session );
		super.performInserts( session );
	}
	
	
	@Override
	public boolean evalSymbolicZeroApprox( EVAL_MODE mode )
	{
		return( value.evalSymbolicZeroApprox(mode) );
	}
	
	
	@Override
	public boolean evalSymbolicIdentityApprox( EVAL_MODE mode )
	{
		return( value.evalSymbolicIdentityApprox(mode) );
	}
	
	
	@Override
	public void writeMathML( PrecedenceComparator pc , PrintStream ps )
	{
		value.writeMathML(pc, ps);
	}
	
	
	@Override
	public String writeDesc( WriteElemCache<TolerantElem<R,S,T>,TolerantElemFactory<R,S,T>> cache , PrintStream ps )
	{
		String st = cache.get( this );
		if( st == null )
		{
			final String res = value.writeDesc( (WriteElemCache)( cache.getInnerCache() ) , ps);
			final String ims = trf.writeDesc( (WriteTolerantResultFactoryCache<R,S,T>)( cache.getAuxCache( (Class<? extends AbstractCache<?, ?, ?, ?>>) ((Class)(WriteTolerantResultFactoryCache.class)) ) ) , ps);
			st = cache.getIncrementVal();
			cache.put(this, st);
			this.getFac().writeElemTypeString( ps );
			ps.print( " " );
			ps.print( st );
			ps.print( " = new " );
			this.getFac().writeElemTypeString( ps );
			ps.print( "( " );
			ps.print( res );
			ps.print( " , " );
			ps.print( ims );
			ps.println( " );" );
		}
		return( st );
	}

	
	/**
	 * Constructs the elem.
	 * 
	 * @param _value The value of the elem.
	 * @param _trf The factory for tolerant results.
	 */
	public TolerantElem( R _value , T _trf )
	{
		value = _value;
		trf = _trf;
	}
	
	

	/**
	 * Gets the value of the elem.
	 * 
	 * @return The value of the elem.
	 */
	public R getValue() {
		return value;
	}

	/**
	 * Gets the factory for tolerant results.
	 * 
	 * @return The factory for tolerant results..
	 */
	public T getTrf() {
		return trf;
	}


	/**
	 * The value of the elem.
	 */
	private R value;
	
	/**
	 * The factory for tolerant results.
	 */
	private T trf;

}

